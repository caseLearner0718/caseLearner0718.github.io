{"pages":[],"posts":[{"title":"hexo Debug","text":"Introduce本篇將記錄安裝、使用hexo時，遇到的各式狀況，以及排除方式。 hexo 運行本地端時錯誤當運行本地端伺服器時，遇到無法成功開啟的狀況。 1$ hexo server ERROR CODE： 1234567891011INFO ======================================= ██╗ ██████╗ █████╗ ██████╗ ██╗ ██╗███████╗ ██║██╔════╝██╔══██╗██╔══██╗██║ ██║██╔════╝ ██║██║ ███████║██████╔╝██║ ██║███████╗ ██║██║ ██╔══██║██╔══██╗██║ ██║╚════██║ ██║╚██████╗██║ ██║██║ ██║╚██████╔╝███████║ ╚═╝ ╚═════╝╚═╝ ╚═╝╚═╝ ╚═╝ ╚═════╝ ╚══════╝=============================================INFO Checking dependenciesERROR Package cheerio is not installed.ERROR Please install the missing dependencies from the root directory of your Hexo site. 此狀況發生原因來自缺少cheerio套件，進入blog-hexo目录，執行以下指令： 1$ npm i cheerio -S 安装所需套件後即可(-S指安装並將其保存到當前項目的配置中，下次就會統一安裝了) 亂碼問題如果發現內容是亂碼，將檔案儲存為UTF-8編碼。 window實作方式：用記事本開啟檔案 -&gt; 另存新檔 -&gt; 編碼選擇 “UTF-8” 編碼更改完成後，執行以下指令，就可以重新佈署! 12$ hexo g # g = generate$ hexo d # d = deploy 上傳未更新問題有時變更config檔後，想上傳新的結果，但卻無法覆蓋舊版本。 解決辦法： 先清除hexo本身的暫存，再重新生成暫存版本。 123$ hexo clean # 清除快取檔案和已產生的靜態檔案。$ hexo g # g = generate$ hexo d # d = deploy 主題格式跑版問題在剛變更主題時，遇到主頁跑板問題。 問題描述： 當時主頁文章有三篇，變且預設是展開的，其中一篇為hexo預設的文章。跑版格式為：原本預設在左側的個人資訊欄變成在版面中央，文章列表被擠到左側。 解決辦法： 將hexo預設文章刪除後，問題即排除。操作手法請參見用Hexo架設個人blog 文章太長在設定好hexo，以及挑選好一個自己喜歡的主題後，終於設定好了，卻發現Home主頁下，文章每篇都落落長，害的排版變得好醜。 解決辦法： 在文章中，加入特定注記，使得文章在遇到注記的地方以下，用Read More代替。 例如： 12以上文章會顯示&lt;!-- more --&gt; 實際效果： 封面圖片來源全網最實用的Debug調試技巧匯總 - 每日新聞","link":"/2020/04/16/hexo-debug/"},{"title":"用Hexo架設個人blog","text":"建構Blog-githubBlog幾乎現代工程師必備的工具，優點： 發布tutorial 提供與其他Developer的交流 推薦自己 將日常學習整理成tutorial，除了避免日後自己忘記，能夠快速熟悉曾經的學習外，還能夠建立留言板與其他Developer交流，互相學習。也能幫助其他人快速上手相同性質的開發，類似Open source的概念，通過其回饋社會。甚至在面試時，能夠作為能力的證明! 環境建置我們需要的環境如下： Node.js (用於方便安裝Hexo) git Hexo-git Hexo github帳號 Node.js 認識Node.js 安裝Node.js git 認識git git與github的關係 安裝git(如果原本有開著command line，安裝完git後需要重啟command line，環境變數才會寫入) 通過檢查版本，來驗證是否安裝成功 1$ git --version Github登入github找到右上角選單中Your repositaries (儲存庫)新增一個Repository命名為你的帳號名稱看到這個畫面就是創建成功了喔! HexoHexo是一個快速、簡單且高效的Blog框架，我們可以使用node.js快速布置它。它可以使非web開發人員，須要自己的Blog時，省去很多時間，並專注於內容的編寫。Hexo產生出來的Blog支援MarkDown語法，並可以建置在github空間上!實在非常方便。 中文API 安裝Hexo-git1$ npm install hexo-deployer-git --save 安裝Hexo1$ npm install hexo-cli -g 通過檢查版本，來驗證是否安裝成功 1$ npm install hexo version 實作建構blog的架構123$ hexo init blog #建構blog架構$ cd blog #進入剛剛hexo建構的資料夾中$ npm install #通過npm幫我們安裝、紀錄hexo建構的架構中 所需的套件 建構完成後，blog目錄結構如下： .├── _config.yml├── package.json├── scaffolds├── source│ ├── _drafts│ └── _posts└── themes 延伸閱讀：npm install做了什麼 _config.yml網站的設定信息，可以在此設定大部分的參數。 package.json網站的資本資料、套件名稱紀錄。 1234567891011121314151617181920package.json{ &quot;name&quot;: &quot;hexo-site&quot;, &quot;version&quot;: &quot;0.0.0&quot;, &quot;private&quot;: true, &quot;hexo&quot;: { &quot;version&quot;: &quot;&quot; }, &quot;dependencies&quot;: { &quot;hexo&quot;: &quot;^3.8.0&quot;, &quot;hexo-generator-archive&quot;: &quot;^0.1.5&quot;, &quot;hexo-generator-category&quot;: &quot;^0.1.3&quot;, &quot;hexo-generator-index&quot;: &quot;^0.2.1&quot;, &quot;hexo-generator-tag&quot;: &quot;^0.2.0&quot;, &quot;hexo-renderer-ejs&quot;: &quot;^0.3.1&quot;, &quot;hexo-renderer-stylus&quot;: &quot;^0.3.3&quot;, &quot;hexo-renderer-marked&quot;: &quot;^0.3.2&quot;, &quot;hexo-server&quot;: &quot;^0.3.3&quot; }} scaffolds模版文件夹。當發布新文章時，Hexo 會根據 scaffold 來建立文件。 source資源文件夾是存放用户資源的地方。除 _posts 文件夹之外，開頭命名為 _ (下滑線)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。 themes主题 文件夹。Hexo 會根据主題來生成静態頁面。 設定blog config接著，我們需要發布我們的blog到Github repository! 在blog資料夾底下，可以發現一隻檔案名叫config.yml，OS為windows的朋友，可以用記事本開啟它。在第一行，它告訴我們，它是一隻Hexo套件的設定檔，接著拉到檔案的最下方。可以找到： 1234# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy: type: 將設定發布的這部分改為： 123456# Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:type: git repository: 你的github repository網址 branch: master 注意!! 在每個設定項後面，必須空一格，例：type: git網址可以在這個介面中找到編輯完設定檔後，我們就可以準備發布服務了喔! 本地端運行、發布服務在發布服務之前，我們可以先透過hexo將網站伺服器建立起來，並先檢查有沒有錯誤。 1$ hexo server 本地端server運行後，連上本地端，先看看發布後的結果。 http://localhost:4000 1$ hexo d -g 如果正常發布的話，會看到hexo-deployer-git要求登入喔注意!! 如果在發布過程中遇到這個錯誤，請在執行一次安裝hexo-deployer-git的指令 1$ npm install hexo-deployer-git --save 檢查是否發布成功在發布完成後，我們可以透過這串網址，造訪我們的blog。如下： https://caseLearner0718.github.io/ 其中caseLearner0718代換入自己的github帳號，即可造訪自己的Blog。 yml副檔名yml、yaml附檔名屬於YAML資料格式，YAML是一個可讀性高，用來表達資料序列化的格式。YAML參考了其他多種語言，包括：C語言、Python、Perl，並從XML、電子郵件的資料格式（RFC 2822）並從中獲得靈感。。目前已經有數種程式語言或手稿語言支援（或者說解析）這種語言。 YAML是”YAML Ain’t a Markup Language”（YAML不是一種標記語言）。在開發的這種語言時，YAML 的意思其實是：”Yet Another Markup Language”（仍是一種標記語言），但為了強調這種語言以資料做為中心，而不是以標記語言為重點，而用反向縮略語重新命名。以上資料來自YAML-維基百科 發布文章創建文章1$ hexo new [postName] 新增完後，在source/_post底下，會看到剛剛新創的檔案，將內容直接新增在裡面就可以了。 推薦MD編輯器：HackMD 刪除文章在source/_post底下，會看到所有發布的文章，將文章直接刪除即可。 123$ hexo clean # 清除快取檔案和已產生的靜態檔案。$ hexo g # g = generate$ hexo d # d = deploy 參考資料Hexo+GitHub，新手也可以快速建立部落格Hexo 官方文件(含API)解决hexo博客的乱码问题","link":"/2020/03/18/Github-Blog/"},{"title":"hexo-Icarus 文章分享套件","text":"Introdution本文中使用之文章分享套件為 ShareThis 安裝步驟： 打開ShareThis官網，點擊頁面上的“從分享按鈕開始”(Start with Share Buttons)按鈕。 在“選擇分享按鈕類型”(Choose type of sharing button)選擇需要的按鈕類型，如有需要的話可點擊下方的“自定義你的分享按鈕” (Customize your share buttons)鏈接進行進一步配置。完成後點擊“下一步”(Next)。 在“註冊並獲取代碼”(Register and get the code!)界麵點擊HTML和“下一步”(Next)按鈕。然後輸入郵箱和密碼完成ShareThis的註冊。 最後，複製代碼獲取界面中的src地址並填入相應的主題配置中，例如下面的ShareThis代碼 themes/icarus/_config.yml 123share: type: sharethis install_url: https://platform-api.sharethis.com/js/sharethis.js#property=xxxxxxxxxxxxx&amp;product=inline-share-buttons 效果演示","link":"/2020/04/17/hexo-shareTool/"},{"title":"LineBot初心者手冊","text":"運作原理 Line透過Webhook的技術與LineBot連接。當User透過Line傳訊息給Line@時，Line@會根據後臺設定的Webhook將訊息透過Post的方式傳給LineBot。 Webhook技術Webhook是讓一個網站與另一個網站通過URL的方式進行”掛勾”。有些人會稱為”訂閱”或是”連接”，主要的意思是讓彼此知道對方的存在。 Webhook應用案例一： 家裡有一個煮飯機器人，提供的服務是煮出美味的餐點送給你。當你肚子餓時，就會透過”掛勾”、”訂閱”、”連接”的方式，通知機器人你餓了，而這樣的方式也許是你對著機器人說話或是操作介面，當機器人做好餐點，就送到指定的地方。以這個例子而言： 訂閱者：你 服務提供者：機器人 動作：送餐至餐桌 案例二： 有個網站提供氣象預報資訊，可以定時傳送氣象資訊給用戶。然而與煮飯機器人不同的是，網站要怎麼做出定位，知道用戶在哪裡呢?這時Webhook的技術就解決了這個問題。 訂閱者：用戶 服務提供者：網站 動作：傳送資料返回用戶 那麼氣象網站怎麼知道用戶在哪裡呢，與煮飯機器人不同，煮飯機器人設置在家中，動作執行時只需要把餐點放置餐桌，氣象網站需要知道資訊需要返回至哪邊。當使用者透過Webhook連接時，氣象網站可以透過封包的來源IP，知道它應該要返回資料給誰。 常見實現Webhook的方法 Heroku ngrokHeroku介紹 Heroku是一個支援多種程式語言的雲平台即服務。在2010年被Salesforce.com收購。Heroku作為最元祖的雲平台之一，從2007年6月起開發，當時它僅支援Ruby，但後來增加了對Java、Node.js、Scala、Clojure、Python以及PHP和Perl的支援。收費方面，Heroku採用方案收費，通過租用不同的Dyno、資料庫，會有不同的收費機制，不過對於實現我們的LineBot，免費的Dyno即可。 Dyno是Heroku自訂的硬體容器單位，一個Dyno可以讓一個應用程式執行。 Ngrok介紹Ngrok是環境建置工具，用於通過任何NAT或防火牆向本地主機提供即時安全的URL。讓開發者通過簡單的操作就能實現Webhook的技術，簡化開發者的工作。收費方面，Ngrok採用方案收費，差別在於提供不同的功能，雖然要開發LineBot時，免費的方案即可。但是對於正式使用時，免費的方案會使機器每次重開時，重製URL，導致Line@與LineBot沒辦法順利連接。 環境建置在開始前你需要具備 Heroku 帳號 Line 帳號 建置Heroku環境1.登入Heroku右上角有個New → create new app 2.輸入APP名稱 3.檢視 創建完APP後，可以從面板上Overview看到目前執行這個APP的資源是空的，不過沒關係，之後我們在慢慢完整它。目前只要知道Heroku上分為哪種資源。Heroku資源介紹Heroku的硬體資源分為兩種 Add-ons Dyno Add-ons 是提供資料庫、資料備源、水平擴展、程序監控…各種開發工具的資源。 Dyno是一項Heroku定義的硬體容器，一個應用程序在Heroku上執行需要一個Dyno，而我們在雲端空間上，也必須要有一個檔案指定這項APP中，需要幾個Dyno。並且在後台設定每個Dyno的付費方案。 Line@、Line Developer環境建置 登入Line Debelopers創建提供者 創建Message API channel Line@重要基本資料創建完成後 瀏覽基本資料可以看見幾項比較重要的資料 Channel secret 相當於LineBot控制Line@時，需要的密碼。如果不幸外流了，可以在通過Issue按鈕重新發行。注意：1小時只能發行一次 User ID 這是創建者的Line帳號ID，開發測試時，可以透過自己的Line ID傳訊給自己。 Channel access token 使用此通道訪問令牌來調用Messaging API。這個長期存在的令牌不會過期。要發行新令牌或替換現有令牌，請單擊”Reissue”發行。 Line@ ID、QR code 通過ID、QR code，測試時加自己的Line@好友測試。 Webhook 設定 Use Webhook一定要開啟，訊息才能轉傳給LineBotWebhook URL https://你的APP名稱.herokuapp.com/callbackLineBot實作在運作原理中，我們提到Line@與LineBot的連接靠Webhook技術。那具體來說，我們要怎麼實現呢? app.py創建一個workSpace資料夾，並透過編輯器撰寫一隻app.py範例程式 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849from flask import Flask, request, abort from linebot import ( LineBotApi, WebhookHandler)from linebot.exceptions import ( InvalidSignatureError)from linebot.models import ( MessageEvent, TextMessage, TextSendMessage,) app = Flask(__name__)# Channel Access Tokenline_bot_api = LineBotApi('YOUR_CHANNEL_ACCESS_TOKEN') # Channel Secrethandler = WebhookHandler('YOUR_CHANNEL_SECRET') @app.route(\"/callback\", methods=['POST'])def callback(): # get X-Line-Signature header value signature = request.headers['X-Line-Signature'] # get request body as text body = request.get_data(as_text=True) app.logger.info(\"Request body: \" + body) # handle webhook body try: handler.handle(body, signature) except InvalidSignatureError: print(\"Invalid signature. Please check your channel access token/channel secret.\") abort(400) return 'OK' @handler.add(MessageEvent, message=TextMessage)def handle_message(event): line_bot_api.reply_message( event.reply_token, TextSendMessage(text=event.message.text)) if __name__ == \"__main__\": app.run() 將這兩項資料 根據Line Developer後台的資料替換 Channel access token (16行) Channel secret (19行) ProcfileProcfile是Heroku上定義app裡有哪些服務的檔案，並且通過這個檔案分配Dyno注意：如果沒有上傳Procfile的話，app.py是不會有Dyno執行它的 創建一個Procfile.txt web: python app.py 如果您的文件資料夾裡沒有顯示副檔名，可以通過上方檢視-&gt;副檔名(打勾) 設定 requirements.txtrequirements.txt用於紀錄專案所需安裝的套件名稱，是Heroku上建置環境的好夥伴，有了它我們上傳lineBot後，Heroku會根據裡面的內容，安裝我們的服務所需的套件。 line-bot-sdk flask 佈署服務您需要先安裝： Heroku CLI Git Heroku CLIHeroku命令行界面（CLI）使得直接從終端輕鬆創建和管理Heroku應用程序變得容易。這是使用Heroku的必要部分。 GitHeroku佈屬服務的指定工具。Git為分散式版本控制系統，是為了更好管理Linux內核而開發的。可以把檔案的狀態作為更新歷史記錄保存起來。因此可以把編輯過的檔案復原到以前的狀態，也可以顯示編輯過內容的差異。而且，當有人想將編輯過的舊檔案上傳到伺服器、覆蓋其他人的最新檔案時，系統會發出警告，因此可以避免在無意中覆蓋他人的編輯內容。 佈署服務 - git 在資料夾路徑搜尋cmd 使用終端或命令行應用程序登錄到 Heroku heroku login 設定 git上傳者資料 12git config --global user.name &quot;上傳者名稱&quot;git config --global user.email 上傳者信箱 將1、2行中 上傳者資料替換成自己的資料 初始化 git 1git init 注意：只有第一次執行需要 5.將git與heroku綁定 1heroku git:remote -a {HEROKU_APP_NAME} 將{ }內填入您Heroku創建的APP名稱 6.利用git將資料寫入版本控制資料中，並同步至Heroku雲端上 123git add .git commit -m &quot;create code&quot;git push -f heroku master 注意：以後需要上傳code至雲端 都需要用到這邊的指令“create code” 未來替換成該次版本更改的動作 測試通過LineBot Developer後台裡Line@ ID加入自己的Line帳號好友並傳送訊息給它 如果它會白目的學你說話，表示範例程式實作成功了喔！","link":"/2020/03/18/lineBot-python/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"linebot","slug":"linebot","link":"/tags/linebot/"}],"categories":[]}